version: '7.1'

# Define default environment variables to pass
# to Docker Compose
environment:
  RAILS_ENV: development

compose:
  files:
    - .dockerdev/compose.yml
  project_name: mastodon

interaction:
  # This command spins up a Rails container with the required dependencies (such as databases),
  # and opens a terminal within it.
  runner:
    description: Open a Bash shell within a Rails container (with dependencies up)
    service: rails
    command: /bin/bash

  # Run a Rails container without any dependent services (useful for non-Rails scripts)
  bash:
    description: Run an arbitrary script within a container (or open a shell without deps)
    service: rails
    command: /bin/bash
    compose_run_options: [ no-deps ]

  # A shortcut to run Bundler commands
  bundle:
    description: Run Bundler commands
    service: rails
    command: bundle
    compose_run_options: [ no-deps ]

  rails:
    description: Run Rails commands
    service: rails
    command: bundle exec rails
    subcommands:
      s:
        description: Run Rails server at http://localhost:3000
        service: web
        compose:
          run_options: [ service-ports, use-aliases ]
  rspec: &rspec
    description: Run unit tests
    service: rails
    command: bundle exec rspec
    environment:
      RAILS_ENV: test
  'rspec:notty':
    <<: *rspec
    description: Run unit tests w/o TTY (for hyperfine benchmarks)
    command: bundle exec rspec
    environment:
      RAILS_ENV: test
    compose:
      # Fuubar (ProgressBar) introduces a 2x overhead when no TTY is available (trying to measure the terminal width via syscalls)
      run_options: [ no-TTY, env=RUBY_PROGRESS_BAR_LENGTH=80 ]

  yarn:
    description: Run Yarn commands
    service: rails
    command: yarn
    compose_run_options: [ no-deps ]

  psql:
    description: Run Postgres psql console
    service: postgres
    default_args: mastodon_development
    command: psql -h postgres -U postgres

  'redis-cli':
    description: Run Redis console
    service: redis
    command: redis-cli -h redis

provision:
  - '[[ "$RESET_DOCKER" == "true" ]] && echo "Re-creating the Docker env from scratch..." && dip compose down --volumes || echo "Re-provisioning the Docker env..."'
  - dip compose up -d postgres redis
  - dip bundle check || dip bundle install
  - dip rails db:prepare
  - dip rails db:test:prepare
  - dip yarn
  - NODE_ENV=production RAILS_ENV=test dip rails assets:precompile
  - echo "ðŸš€ Ready to run tests! Run 'dip rspec' to run them all"
